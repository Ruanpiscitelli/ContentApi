services:
  # Serviço de Geração de Imagens
  image-generator:
    build:
      context: .
      dockerfile: services/image_generator/Dockerfile
    env_file: .env
    volumes:
      - ./models:/app/models:ro
      - ./storage:/app/storage
      - ./logs/image:/app/logs
    ports:
      - "8001:8000"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu, utility, compute]
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - CUDA_VISIBLE_DEVICES=all
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Serviço de Geração de Voz
  voice-generator:
    build:
      context: .
      dockerfile: services/voice_generator/Dockerfile
    env_file: .env
    volumes:
      - ./models:/app/models:ro
      - ./storage:/app/storage
      - ./logs/voice:/app/logs
    ports:
      - "8002:8000"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu, utility, compute]
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - CUDA_VISIBLE_DEVICES=all
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Serviço de Geração de Vídeo
  video-generator:
    build:
      context: .
      dockerfile: services/video_generator/Dockerfile
    env_file: .env
    volumes:
      - ./models:/app/models:ro
      - ./storage:/app/storage
      - ./logs/video:/app/logs
    ports:
      - "8003:8000"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu, utility, compute]
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - CUDA_VISIBLE_DEVICES=all
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Serviço de Edição de Vídeo
  video-editor:
    build:
      context: .
      dockerfile: services/video_editor/Dockerfile
    env_file: .env
    volumes:
      - ./models:/app/models:ro
      - ./storage:/app/storage
      - ./logs/editor:/app/logs
    ports:
      - "8004:8000"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu, utility, compute]
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - CUDA_VISIBLE_DEVICES=all
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Serviço de Cache Redis
  redis:
    image: redis:7.2-alpine
    command: redis-server --save 60 1 --loglevel warning --maxmemory 4gb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  dashboard:
    ports:
      - "8006:8000"  # Porta única
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy

volumes:
  redis-data:
    driver: local

networks:
  default:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16 